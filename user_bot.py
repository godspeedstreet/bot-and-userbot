from pyrogram import Client, filters
from dotenv import load_dotenv
import os
import logging
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
api_id = os.getenv('API_ID')
api_hash = os.getenv('API_HASH')
phone_number = os.getenv('PHONE_NUMBER')
source_channel_ids = [int(id.strip()) for id in os.getenv('SOURCE_CHANNEL_IDS', '').split(',')]
admin_bot_id = int(os.getenv('ADMIN_BOT_ID'))

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
app = Client(
    "user_bot", 
    api_id=api_id, 
    api_hash=api_hash,
    phone_number=phone_number
)

def check_copy_restrictions(message):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Pyrogram
    
    Returns:
        bool: True, –µ—Å–ª–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, —É–∫–∞–∑—ã–≤–∞—é—â–∏—Ö –Ω–∞ –∑–∞–ø—Ä–µ—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    copy_restriction_keywords = [
        '–Ω–µ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å', 
        'copyright', 
        'all rights reserved', 
        '¬©', 
        'watermark', 
        '–≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫',
        '–∑–∞–ø—Ä–µ—â–µ–Ω–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ',
        '–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ',
        'do not copy',
        'no repost',
        '–Ω–µ —Ä–µ–ø–æ—Å—Ç–∏—Ç—å',
        '–±–µ–∑ —Ä–µ–ø–æ—Å—Ç–∞'
    ]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    text_to_check = message.text or message.caption or ''
    text_lower = text_to_check.lower()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
    for keyword in copy_restriction_keywords:
        if keyword in text_lower:
            logger.warning(f"–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É: {keyword}")
            return True
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –≤ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞—Ö
        if message.photo or message.video:
            if message.caption and any(mark in message.caption.lower() for mark in ['watermark', '–≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫']):
                logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –≤ –º–µ–¥–∏–∞—Ñ–∞–π–ª–µ")
                return True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–ø–æ—Å—Ç —á–µ—Ä–µ–∑ —Ç–µ–≥–∏
        if message.entities:
            for entity in message.entities:
                if entity.type in ['hashtag', 'cashtag']:
                    hashtag = text_lower[entity.offset:entity.offset+entity.length].lower()
                    if any(tag in hashtag for tag in ['#nocopy', '#–Ω–µrepost', '#–∑–∞–ø—Ä–µ—Ç–ø–æ—Å—Ç–∞']):
                        logger.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–µ—â–∞—é—â–∏–π —Ö—ç—à—Ç–µ–≥: {hashtag}")
                        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: {e}")
    
    return False

@app.on_message(filters.chat(source_channel_ids))
async def forward_new_post(client, message):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not all([source_channel_ids, admin_bot_id]):
            logger.error("Source channels or admin bot not configured")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ö–æ–¥–Ω–æ–º –∫–∞–Ω–∞–ª–µ
        source_channel_info = f"Channel ID: {message.chat.id}"
        if message.chat.username:
            source_channel_info += f" (@{message.chat.username})"
        if message.chat.title:
            source_channel_info += f" - {message.chat.title}"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
        if check_copy_restrictions(message):
            logger.warning(f"Copying restricted for message {message.id} from {source_channel_info}")
            # –í–æ—Å—Å–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ö–æ–¥–Ω–æ–º –∫–∞–Ω–∞–ª–µ –∫ caption –∏–ª–∏ —Ç–µ–∫—Å—Ç—É
                if message.text:
                    text = message.text
                    await client.send_message(admin_bot_id, text)
                    await client.send_message(admin_bot_id, f"üí¨ Source: {source_channel_info}")
                    logger.info(f"Manually forwarded text message {message.id} to admin bot")
                elif message.photo:
                    file = await client.download_media(message.photo.file_id)
                    caption = message.caption or ''
                    await client.send_photo(admin_bot_id, file, caption=caption)
                    await client.send_message(admin_bot_id, f"üí¨ Source: {source_channel_info}")
                    logger.info(f"Manually forwarded photo message {message.id} to admin bot")
                    os.remove(file)
                elif message.video:
                    file = await client.download_media(message.video.file_id)
                    caption = message.caption or ''
                    await client.send_video(admin_bot_id, file, caption=caption)
                    await client.send_message(admin_bot_id, f"üí¨ Source: {source_channel_info}")
                    logger.info(f"Manually forwarded video message {message.id} to admin bot")
                    os.remove(file)
                elif message.document:
                    file = await client.download_media(message.document.file_id)
                    caption = message.caption or ''
                    await client.send_document(admin_bot_id, file, caption=caption)
                    await client.send_message(admin_bot_id, f"üí¨ Source: {source_channel_info}")
                    logger.info(f"Manually forwarded document message {message.id} to admin bot")
                    os.remove(file)
                elif message.voice:
                    file = await client.download_media(message.voice.file_id)
                    caption = message.caption or ''
                    await client.send_voice(admin_bot_id, file, caption=caption)
                    await client.send_message(admin_bot_id, f"üí¨ Source: {source_channel_info}")
                    logger.info(f"Manually forwarded voice message {message.id} to admin bot")
                    os.remove(file)
                elif message.video_note:
                    file = await client.download_media(message.video_note.file_id)
                    # –î–ª—è video note –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å caption, –æ—Ç–ø—Ä–∞–≤–∏–º –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                    await client.send_video_note(admin_bot_id, file)
                    await client.send_message(admin_bot_id, f"üí¨ Source: {source_channel_info}")
                    logger.info(f"Manually forwarded video note {message.id} to admin bot")
                    os.remove(file)
                else:
                    logger.warning(f"Unsupported message type for manual forwarding: {message}")
            except Exception as e:
                logger.error(f"Error manually forwarding restricted message {message.id}: {e}")
            return

        try:
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω-–±–æ—Ç—É
            forwarded = await client.forward_messages(
                chat_id=admin_bot_id,
                from_chat_id=message.chat.id,
                message_ids=message.id
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è
            if not hasattr(forwarded, '_client'):
                forwarded._client = client
            if not hasattr(forwarded, '_source_info'):
                forwarded._source_info = source_channel_info
            logger.info(f"Forwarded message {message.id} from {source_channel_info} to admin bot")
        except Exception as e:
            logger.warning(f"Error forwarding message {message.id}, trying to manually forward: {e}")
            # –ï—Å–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –≤–æ—Å—Å–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é
            try:
                if message.text:
                    text = message.text
                    sent_msg = await client.send_message(admin_bot_id, text)
                    if not hasattr(sent_msg, '_source_info'):
                        sent_msg._source_info = source_channel_info
                    logger.info(f"Manually forwarded text message {message.id} to admin bot")
                elif message.photo:
                    file = await client.download_media(message.photo.file_id)
                    caption = message.caption or ''
                    sent_msg = await client.send_photo(admin_bot_id, file, caption=caption)
                    if not hasattr(sent_msg, '_source_info'):
                        sent_msg._source_info = source_channel_info
                    logger.info(f"Manually forwarded photo message {message.id} to admin bot")
                    os.remove(file)
                elif message.video:
                    file = await client.download_media(message.video.file_id)
                    caption = message.caption or ''
                    sent_msg = await client.send_video(admin_bot_id, file, caption=caption)
                    if not hasattr(sent_msg, '_source_info'):
                        sent_msg._source_info = source_channel_info
                    logger.info(f"Manually forwarded video message {message.id} to admin bot")
                    os.remove(file)
                elif message.document:
                    file = await client.download_media(message.document.file_id)
                    caption = message.caption or ''
                    sent_msg = await client.send_document(admin_bot_id, file, caption=caption)
                    if not hasattr(sent_msg, '_source_info'):
                        sent_msg._source_info = source_channel_info
                    logger.info(f"Manually forwarded document message {message.id} to admin bot")
                    os.remove(file)
                elif message.voice:
                    file = await client.download_media(message.voice.file_id)
                    caption = message.caption or ''
                    sent_msg = await client.send_voice(admin_bot_id, file, caption=caption)
                    if not hasattr(sent_msg, '_source_info'):
                        sent_msg._source_info = source_channel_info
                    logger.info(f"Manually forwarded voice message {message.id} to admin bot")
                    os.remove(file)
                elif message.video_note:
                    file = await client.download_media(message.video_note.file_id)
                    # –î–ª—è video note –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å caption, –æ—Ç–ø—Ä–∞–≤–∏–º –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                    sent_msg = await client.send_video_note(admin_bot_id, file)
                    if not hasattr(sent_msg, '_source_info'):
                        sent_msg._source_info = source_channel_info
                    logger.info(f"Manually forwarded video note {message.id} to admin bot")
                    os.remove(file)
                else:
                    logger.warning(f"Unsupported message type for manual forwarding: {message}")
            except Exception as e:
                logger.error(f"Error manually forwarding message {message.id}: {e}")
    except Exception as e:
        logger.error(f"Unexpected error processing message {message.id}: {e}")

def main():
    try:
        logger.info("Starting User Bot...")
        app.run()
    except Exception as e:
        logger.error(f"Error starting bot: {e}")

if __name__ == '__main__':
    main() 