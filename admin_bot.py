from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from dotenv import load_dotenv
import os
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('admin_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –±–æ—Ç–∞
bot_token = os.getenv('BOT_TOKEN')  
api_id = os.getenv('API_ID')
api_hash = os.getenv('API_HASH')
admin_ids = [int(id.strip()) for id in os.getenv('ADMIN_IDS', '').split(',')]  
target_channels = os.getenv('TARGET_CHANNEL_USERNAMES', '').split(',')  # –°–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
user_bot_id = int(os.getenv('USER_BOT_ID'))  

# –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
logger.info("=== Bot Configuration ===")
logger.info(f"Bot Token: {bot_token}")
logger.info(f"API ID: {api_id}")
logger.info(f"Admin IDs: {admin_ids}")
logger.info(f"Target Channels: {target_channels}")
logger.info(f"User Bot ID: {user_bot_id}")

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
bot = Client(
    "notification_bot",
    api_id=api_id,
    api_hash=api_hash,
    bot_token=bot_token
)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è
pending_posts = {}

@bot.on_message(filters.command("start"))
async def start_command(client, message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user_id = message.from_user.id
        logger.info(f"Received /start command from user {user_id}")
        
        if user_id in admin_ids:
            channels_list = "\n".join([f"‚Ä¢ {channel}" for channel in target_channels])
            await message.reply(
                f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤. –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
                f"–¶–µ–ª–µ–≤—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n{channels_list}"
            )
        else:
            await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤.")
            
    except Exception as e:
        logger.error(f"Error in start_command: {str(e)}", exc_info=True)

@bot.on_message(~filters.command("start"))
async def handle_new_post(client, message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç user_bot"""
    try:
        user_id = message.from_user.id
        logger.info(f"Received message from user {user_id}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —é–∑–µ—Ä-–±–æ—Ç–∞
        if user_id == user_bot_id:
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            buttons = [
                [InlineKeyboardButton("üì¢ –í—ã–ª–æ–∂–∏—Ç—å –≤–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã", callback_data=f"approve_all_{message.id}")]
            ]
            
            for channel in target_channels:
                channel = channel.strip()
                if channel:
                    buttons.append([
                        InlineKeyboardButton(f"–í—ã–ª–æ–∂–∏—Ç—å –≤ {channel}", callback_data=f"approve_{message.id}_{channel}")
                    ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            buttons.append([InlineKeyboardButton("‚ùå –ù–µ –≤—ã–∫–ª–∞–¥—ã–≤–∞—Ç—å", callback_data=f"reject_{message.id}")])
            
            keyboard = InlineKeyboardMarkup(buttons)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
            for admin_id in admin_ids:
                try:
                    logger.info(f"Sending notification to admin {admin_id}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                    message_type = "–ù–æ–≤—ã–π –ø–æ—Å—Ç"
                    if message.voice:
                        message_type = "–ù–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
                    elif message.video_note:
                        message_type = "–ù–æ–≤–æ–µ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ"
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                    source_info = getattr(message, '_source_info', '')
                    notification_text = f"‚¨ÜÔ∏è {message_type} –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                    
                    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    forwarded = await message.forward(admin_id)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    notification = await bot.send_message(
                        chat_id=admin_id,
                        text=notification_text,
                        reply_to_message_id=forwarded.id,
                        reply_markup=keyboard
                    )
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ
                    if str(message.id) not in pending_posts:
                        pending_posts[str(message.id)] = {
                            'original_message': message,
                            'admin_messages': {}
                        }
                    
                    pending_posts[str(message.id)]['admin_messages'][admin_id] = {
                        'notification': notification,
                        'forwarded': forwarded
                    }
                    
                    logger.info(f"Successfully sent notification to admin {admin_id}")
                except Exception as e:
                    logger.error(f"Error sending notification to admin {admin_id}: {str(e)}", exc_info=True)
        else:
            logger.info(f"Message from non-user-bot {user_id}, ignoring")
            
    except Exception as e:
        logger.error(f"Error in handle_new_post: {str(e)}", exc_info=True)

@bot.on_callback_query()
async def handle_callback(client, callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        if callback_query.from_user.id not in admin_ids:
            await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
            return

        data_parts = callback_query.data.split('_')
        action = data_parts[0]
        
        if action == "approve" and data_parts[1] == "all":
            message_id = data_parts[2]
        else:
            message_id = data_parts[1]
            target_channel = data_parts[2] if len(data_parts) > 2 else None
        
        post_info = pending_posts.get(message_id)
        
        if not post_info:
            await callback_query.answer("–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
            return

        if action == "approve":
            try:
                original_message = post_info['original_message']
                message_type = "–ø–æ—Å—Ç"
                
                if original_message.voice:
                    message_type = "–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
                elif original_message.video_note:
                    message_type = "–≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ"
                
                if data_parts[1] == "all":
                    # –ü—É–±–ª–∏–∫—É–µ–º –≤–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
                    successful_channels = []
                    failed_channels = []
                    
                    for channel in target_channels:
                        channel = channel.strip()
                        if not channel:
                            continue
                            
                        try:
                            channel_post = await original_message.copy(channel)
                            if channel_post:
                                successful_channels.append(channel)
                                logger.info(f"Successfully published {message_type} to channel {channel}")
                            else:
                                failed_channels.append(channel)
                                logger.error(f"Failed to publish {message_type} to channel {channel}")
                        except Exception as e:
                            failed_channels.append(channel)
                            logger.error(f"Error publishing to channel {channel}: {e}")
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
                    result_message = f"‚úÖ {message_type.capitalize()} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω(–æ) –≤ –∫–∞–Ω–∞–ª—ã:\n"
                    if successful_channels:
                        result_message += "\n".join([f"‚Ä¢ {channel}" for channel in successful_channels])
                    else:
                        result_message += "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–∏ –≤ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª"
                    
                    if failed_channels:
                        result_message += f"\n\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª—ã:\n"
                        result_message += "\n".join([f"‚Ä¢ {channel}" for channel in failed_channels])
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —É –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
                    for admin_id, messages in post_info['admin_messages'].items():
                        try:
                            await messages['notification'].edit_text(result_message)
                        except Exception as e:
                            logger.error(f"Error updating admin {admin_id} message: {str(e)}")
                    
                    await callback_query.answer(
                        "–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞", 
                        show_alert=True
                    )
                    
                    # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                    if successful_channels:
                        del pending_posts[message_id]
                        
                else:
                    # –ü—É–±–ª–∏–∫—É–µ–º –≤ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª
                    logger.info(f"Attempting to publish message to channel {target_channel}")
                    channel_post = await original_message.copy(target_channel)
                    
                    if channel_post:
                        logger.info(f"Successfully published {message_type} to channel {target_channel}")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —É –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
                        for admin_id, messages in post_info['admin_messages'].items():
                            try:
                                await messages['notification'].edit_text(
                                    f"‚úÖ {message_type.capitalize()} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω(–æ) –≤ –∫–∞–Ω–∞–ª {target_channel}"
                                )
                            except Exception as e:
                                logger.error(f"Error updating admin {admin_id} message: {str(e)}")
                        
                        await callback_query.answer(
                            f"{message_type.capitalize()} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω(–æ) –≤ –∫–∞–Ω–∞–ª {target_channel}", 
                            show_alert=True
                        )
                        
                        # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                        del pending_posts[message_id]
                    else:
                        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å {message_type} –≤ –∫–∞–Ω–∞–ª {target_channel}")
                    
            except Exception as e:
                error_msg = str(e)
                logger.error(f"Error in approve action: {error_msg}", exc_info=True)
                await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", show_alert=True)
                await bot.send_message(
                    callback_query.from_user.id,
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {error_msg}"
                )
                return

        elif action == "reject":
            original_message = post_info['original_message']
            message_type = "–ø–æ—Å—Ç"
            
            if original_message.voice:
                message_type = "–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            elif original_message.video_note:
                message_type = "–≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ"
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —É –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
            for admin_id, messages in post_info['admin_messages'].items():
                try:
                    await messages['notification'].edit_text(f"‚ùå {message_type.capitalize()} –±—ã–ª(–æ) –æ—Ç–∫–ª–æ–Ω–µ–Ω(–æ)")
                except Exception as e:
                    logger.error(f"Error updating admin {admin_id} message: {str(e)}")
            
            await callback_query.answer(f"{message_type.capitalize()} –æ—Ç–∫–ª–æ–Ω–µ–Ω(–æ)", show_alert=True)
            
            # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ
            del pending_posts[message_id]
        
    except Exception as e:
        logger.error(f"Error in handle_callback: {str(e)}", exc_info=True)
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è", show_alert=True)
        await bot.send_message(
            callback_query.from_user.id,
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        )

def main():
    try:
        logger.info("=== Starting Notification Bot ===")
        logger.info("Press Ctrl+C to stop the bot")
        bot.run()
    except Exception as e:
        logger.error(f"Error starting bot: {str(e)}", exc_info=True)

if __name__ == '__main__':
    main()